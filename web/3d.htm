<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - lights - physical lights</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<meta name="author" content="Francisc Ungureanu"/>
		<meta name="copyright" content="Francisc Ungureanu Copyright (c) 2017"/>

		<style>
			body {
				background: #C99A61 url('images/bkg.jpg');
				overflow: hidden;
				width: 100%;
				height: 100%;
				margin: 0;
				padding: 0;
			}

			#info {
				position: absolute;
				top: 0px; width: 100%;
				color: #ffffff;
				padding: 5px;
				font-family: Monospace;
				font-size: 13px;
				text-align: center;
			}

			a {
				color: #ff0080;
				text-decoration: none;
			}

			a:hover {
				color: #0080ff;
			}
		</style>
	</head>
	<body>

		<div id="container"></div>

		<script src="vendor/jquery/dist/jquery.min.js" type="text/javascript"></script>
		<script src="vendor/threejs/three.js"></script>
		<script src="vendor/threejs/libs/stats.min.js"></script>
		<script src="vendor/threejs/libs/dat.gui.min.js"></script>
		<script src="vendor/threejs/controls/OrbitControls.js"></script>
		<script src="vendor/threejs/WebGL.js"></script>

		<script src="js/boot.js" type="text/javascript"></script>

		<script>

			if (WEBGL.isWebGLAvailable() === false) {
				document.body.appendChild(WEBGL.getWebGLErrorMessage());
			}

			var camera, scene, renderer, photos, font,
				stats;
			var ballMat, cubeMat;

			var maxObjects = 5;
			var r = 500;
			var pCount = 0;

			var textureLoader = new THREE.TextureLoader();
			init();
			animate();

			function addObject () {
				if (photos.length > maxObjects) return;

				loadSinglePhoto(false, {'size': 'B'},
					function (photo) {
						var img = new Image();
						img.src = photo.src;

						var map = new THREE.Texture(img);
						map.anisotropy = 4;
						map.repeat.set(1, 1);
						map.needsUpdate = true;

						var obj = {};
						obj['mesh'] = new THREE.Group();
						obj['mesh'].name = "PhotoGroup";

						var frame = new THREE.Mesh(
							new THREE.PlaneGeometry(photo.width+30, photo.height + 30 + 40),
							new THREE.MeshBasicMaterial({
								color: 0xffffff
							})
						);
						frame.position.set(0,25, -5);
						obj['mesh'].add(frame);

						// PHOTO
						var photoGeometry = new THREE.PlaneGeometry(photo.width, photo.height);
						var photoImg = new THREE.Mesh(
								photoGeometry,
								new THREE.MeshBasicMaterial({
									color: 0xffffff,
									map: map,
									needsUpdate: true,
									//polygonOffset: true, polygonOffsetFactor: - 50
								})
						);
						photoImg.material.side = THREE.DoubleSide;
						obj['mesh'].add(photoImg);

						if (photo.date) {
							// TEXT
							var xMid, text;
							var color = 0xffffff;
							var matLite = new THREE.MeshBasicMaterial({
								color: color,
								transparent: true,
								opacity: 0.8,
								side: THREE.DoubleSide,
							});
							var shapes = font.generateShapes(photo.date, 20);
							var geometry = new THREE.ShapeBufferGeometry(shapes);
							geometry.computeBoundingBox();
							photoGeometry.computeBoundingBox();
							var textWidth = geometry.boundingBox.max.x - geometry.boundingBox.min.x;
							console.log(textWidth, photo.height, photoGeometry.boundingBox.max.y, photoGeometry.boundingBox.min.y);
							//xMid = - 0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x );
							geometry.translate(-textWidth + photo.width/2 - 10, photo.height/2 - 20 - 10, -5);
							// make shape ( N.B. edge view not visible )
							text = new THREE.Mesh(geometry, matLite);
							text.rotation.z = Math.PI;
							//text.position.z = - 150;
							//text.position.set(0,0, 5);
							obj['mesh'].add(text);
						}

						//obj['mesh'].rotation.x = Math.PI * Math.random();
						//obj['mesh'].rotation.y = Math.PI * Math.random();
						obj['mesh'].rotation.z = 2 * Math.PI / 2.0;

						obj['mesh'].position.x = 2*r * Math.random() - r;
						obj['mesh'].position.y = 2*r * Math.random() - r;
						obj['mesh'].position.z = -9000 + (!done ? -(photos.length + 1) * 5 : 0);

						obj.speedX = (1 - 2* Math.random()) * 0.2;
						obj.speedY = (1 - 2* Math.random()) * 0.2;
						obj.speedZ = 1;

						//obj.rotationY = Math.random()/100 + 0.001;
						//obj.rotationZ = Math.random()/100 + 0.001;

						scene.add(obj['mesh']);

						photos.push(obj);
					},
					function (errorMessage) {
						console.error(errorMessage);
					}
				);
			}

			function init() {
				var container = document.getElementById('container');

				stats = new Stats();
				container.appendChild(stats.dom);

				camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 10000);

				camera.position.x = 0;
				camera.position.z = 10;
				camera.position.y = 0;

				scene = new THREE.Scene();

				scene.add(new THREE.AmbientLight(0xffffff));

				photos = [];

				var loader = new THREE.FontLoader();
				loader.load('fonts/helvetiker_regular.typeface.json', function (loadedFont) {
					font = loadedFont;
					for (var i = 0; i < maxObjects; i++) {
						addObject();
					}
				});

				renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
				renderer.setPixelRatio(window.devicePixelRatio);
				renderer.setSize(window.innerWidth, window.innerHeight);
				container.appendChild(renderer.domElement);

				var controls = new THREE.OrbitControls(camera, renderer.domElement);

				window.addEventListener('resize', onWindowResize, false);

				var gui = new dat.GUI();
				gui.open();
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize(window.innerWidth, window.innerHeight);
			}

			function animate() {
				requestAnimationFrame(animate);
				render();
			}

			function render() {
				for (var i in photos) {
					//if (done) break;
					//photos[i]['mat'].needsUpdate = true;

					var d = photos[i]['mesh'].position.distanceTo(new THREE.Vector3(0,0,100));

					photos[i].speedX ? photos[i]['mesh'].position.x += photos[i].speedX : null;
					photos[i].speedY ? photos[i]['mesh'].position.y += photos[i].speedY : null;
					photos[i].speedZ ? photos[i]['mesh'].position.z += photos[i].speedZ : null;

					photos[i].rotationX ? photos[i]['mesh'].rotation.x += photos[i].rotationX : null;
					photos[i].rotationY ? photos[i]['mesh'].rotation.y += photos[i].rotationY : null;
					photos[i].rotationZ ? photos[i]['mesh'].rotation.z += photos[i].rotationZ : null;

					photos[i]['mesh'].lookAt(0,0,-1000);
					photos[i]['mesh'].rotation.z = 2 * Math.PI / 2.0;

					var speed = Math.min(50, Math.pow(d,3) * d/ 100000000000);
					//if (i==0)console.log(d, speed);


					photos[i]['mesh'].position.z += speed;
				}

				if (photos.length > 0) {
					if (photos[0]['mesh'].position.z > 20) {
						done = true;
						//console.log("ADD", photos.length);
						addObject();

						//console.log("REMOVE");
						scene.remove(photos[0]['mesh']);
						photos.shift();
					}
					//console.log(photos[0]['mesh'].position.y)
				}
				//camera.lookAt(ballMesh.position);
				renderer.render(scene, camera);

				stats.update();
			}
			var done = false;
		</script>
	</body>
</html>
